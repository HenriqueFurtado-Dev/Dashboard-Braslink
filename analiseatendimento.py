# -*- coding: utf-8 -*-
"""AnaliseAtendimento.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Jkn5Bi2Qw5a3QJEa6HAlnT10FCyN76i
"""

# Importando bibliotecas
from google.colab import files
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import math
import datetime

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, precision_score, recall_score, f1_score, ConfusionMatrixDisplay
from sklearn.model_selection import GridSearchCV

# Permitir que o usuário faça o upload do arquivo CSV
uploaded = files.upload()

# Obter o nome do arquivo carregado
file_name = list(uploaded.keys())[0]

# Ler o arquivo CSV carregado
df_atendimento = pd.read_csv(file_name, sep=';', encoding='latin-1')

# Agora você pode executar suas funções com base no DataFrame df_atendimento
# Por exemplo:
def process_data(df):
    # Processamento dos dados aqui
    pass

process_data(df_atendimento)

df_atendimento.head()

print(df_atendimento.columns)

df_atendimento.info()

df_atendimento.size

df_atendimento.describe()

df_atendimento.isnull().sum()

print(df_atendimento.columns)

# Dropando colunas
columns_to_drop = ['SLA PADRÃO (%)', 'SLA DESEJADO (%)']
df_clean = df_atendimento.drop(columns=columns_to_drop)

# Verificando quantidade de ligações atendidas
atendidas = df_clean['ATENDIDAS'].sum()
atendidas

atendimento_total = df_clean['ATENDIDAS'].sum() + df_clean['NÃO ATENDIDAS'].sum()
atendimento_total

sla_minimo = math.trunc((atendimento_total / 100) * 15)
print(sla_minimo)

objetivo_atendimento = atendimento_total - sla_minimo
print(objetivo_atendimento)

# Verificando quantidade de ligações não atendidas
nao_atendidas = df_clean['NÃO ATENDIDAS'].sum()
nao_atendidas

# Configurando o gráfico
sizes = [atendidas, nao_atendidas]
labels = [f'Atendidas \n{atendidas}', f'Não Atendidas \n{nao_atendidas}']
cores = ['green', 'red']
explode = [0.1, 0]

plt.figure(figsize=(8,6))
plt.pie(sizes, labels=labels, autopct='%.1f%%',explode = explode, startangle=90,  colors=cores)

# Adicionando título
plt.title('Atendimentos Totais e Não Atendidas (SLA)')

# Adicionando legenda
plt.legend(loc="upper right", labels=labels)

plt.show()

# Configurando o gráfico
sizes = [objetivo_atendimento, sla_minimo]
labels = [f'Atendimentos Totais \n{objetivo_atendimento}', f'Não Atendidas(SLA) \n{sla_minimo}']
cores = ['cyan', 'yellow']
explode = [0.1, 0]

plt.figure(figsize=(8, 6))
plt.pie(sizes, labels=labels, autopct='%.1f%%', explode=explode, startangle=90, colors=cores)

# Adicionando título
plt.title('Objetivo de Atendimentos atendidos e Não Atendidos')

# Adicionando legenda
#plt.legend(loc="upper right", labels=labels)

plt.show()

df_clean.head()

df_clean.info()

# Suponha que seu DataFrame seja chamado 'df'
df_clean['I.A.'] = df_clean['I.A.'].str.replace('%', '').str.replace(',', '.').astype(float)

media_ia = df_clean['I.A.'].mean()
print(f'Média dos valores da coluna I.A.: {media_ia:.2f}')

import numpy as np
import matplotlib.pyplot as plt

x = np.array(["I.A Objetivo(85%)", f"Valor médio({media_ia:.2f}%)"])
y = np.array([85, media_ia])

plt.bar(x, y, color=['green', 'blue'])
plt.xlabel('Valores')
plt.ylabel('Média I.A.')
plt.grid(True)
plt.title('Gráfico de Barras: Média I.A. por Categoria')
plt.show()

# prompt: calcule a diferença do media_ia para 100

diferenca = 100 - media_ia
print(f'Diferença entre a média I.A. e 100: {diferenca:.2f}%')

# Cálculo dos valores
media_ia = df_clean['I.A.'].mean()
diferenca_85 = 85 - media_ia
restantes_15 = 15

labels = [f'Média I.A. ({media_ia:.2f}%)', f'Diferença para 85% ({diferenca_85:.2f}%)', 'Restantes 15%']
sizes = [media_ia, diferenca_85, restantes_15]
colors = ['green', 'red', 'yellow']
explode = [0.1, 0, 0]

# Criação do gráfico
plt.figure(figsize=(8, 6))
plt.pie(sizes, labels=labels, autopct='%.1f%%', explode=explode, startangle=90, colors=colors)

# Adicionando título
plt.title('Média I.A., Diferença para 85% e Restantes 15%')

# Exibição do gráfico
plt.show()

df_clean.head()

df_clean.rename(columns={'  T.M. ATEND.': 'tempo_medio_atend'}, inplace=True)
df_clean.rename(columns={'T.M. ABAND.': 'tempo_medio_abandono'}, inplace=True)
df_clean.rename(columns={'T.M. ESPERA': 'tempo_medio_espera'}, inplace=True)

def convert_time_to_seconds(time_str):
  hours, minutes, seconds = map(int, time_str.split(':'))
  return hours * 3600 + minutes * 60 + seconds

atendimento = df_clean['tempo_medio_atend'].apply(convert_time_to_seconds)
espera_segundos = atendimento.mean()

tm_atendimento = str(datetime.timedelta(seconds=int(espera_segundos)))

print(f"Média do tempo médio de atendimento: {tm_atendimento}")

espera = df_clean['tempo_medio_espera'].apply(convert_time_to_seconds)
espera_segundos = espera.mean()

tm_espera = str(datetime.timedelta(seconds=int(espera_segundos)))

print(f"Média do tempo médio de espera: {tm_espera}")

print(df_clean.columns)

abandono = df_clean['tempo_medio_abandono'].apply(convert_time_to_seconds)
abandono_segundos = abandono.mean()

tm_abandono = str(datetime.timedelta(seconds=int(abandono_segundos)))

print(f"Média do tempo médio de abadono: {tm_abandono}")

print("=== ATENDIMENTO === \n")
print("Recomendável: 0:06:00\nDesejável:    0:05:30")
print("-"*22)
print(f"Média:        {tm_atendimento} \n\n")

print("=== ESPERA === \n")
print("Recomendável: 0:01:00\nDesejável:    0:00:00")
print("-"*22)
print(f"Média:        {tm_espera} \n\n")

print("=== ABANDONO === \n")
print("Recomendável: 0:01:00\nDesejável:    0:00:00")
print("-"*22)
print(f"Média:        {tm_abandono} \n\n")

# prompt: crie a correlação dos dados numericos e gere um grafico disso

# Selecionando apenas as colunas numéricas
df_numeric = df_clean.select_dtypes(include=['int64', 'float64'])

# Calculando a matriz de correlação
correlation_matrix = df_numeric.corr()

# Gerando o gráfico de calor da matriz de correlação
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlação entre Variáveis Numéricas')
plt.xticks(rotation=45)
plt.show()

df_clean.info()

# Gráfico de barras para comparar médias entre grupos
plt.figure(figsize=(10, 6))
sns.barplot(x='PERÍODO', y='ATENDIDAS', data=df_atendimento)
plt.xlabel('Período')
plt.ylabel('Média de Atendidas')
plt.title('Comparação de Médias de Atendidas por Período')
plt.xticks(rotation=45)

plt.gca().set_xticklabels(df_atendimento['PERÍODO'][::-1])

plt.show()

# Criando um gráfico com uma linha passando pelos valores
plt.figure(figsize=(10, 6))
plt.plot(df_atendimento['PERÍODO'], df_atendimento['ATENDIDAS'], marker='o', color='b')
plt.xlabel('Período')
plt.ylabel('Média de Atendidas')
plt.title('Média de Atendidas por Período')
plt.xticks(rotation=45)  # Rotacionar os rótulos do eixo x para melhor visualização
plt.grid(True)  # Adiciona o grid ao gráfico
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Exemplo de DataFrame
data = {
    'PERÍODO': ['Jan', 'Fev', 'Mar', 'Abr', 'Mai'],
    'ATENDIDAS': [100, 120, 90, 110, 105]
}
df_atendimento = pd.DataFrame(data)

# Gráfico de barras para comparar médias entre grupos
plt.figure(figsize=(10, 6))
sns.barplot(x='PERÍODO', y='ATENDIDAS', data=df_atendimento)
plt.xlabel('Período')
plt.ylabel('Média de Atendidas')
plt.title('Comparação de Médias de Atendidas por Período')
plt.xticks(rotation=45)  # Rotacionar os rótulos do eixo x para melhor visualização
plt.grid(True)  # Adiciona o grid ao gráfico

# Inverter a ordem dos rótulos
plt.gca().set_xticklabels(df_atendimento['PERÍODO'][::-1])

# Exibir valores acima das barras
for index, value in enumerate(df_atendimento['ATENDIDAS']):
    plt.text(index, value + 1, str(value), ha='center', va='bottom')

plt.show()

# Criando um gráfico com uma linha passando pelos valores
plt.figure(figsize=(10, 6))
plt.plot(df_atendimento['PERÍODO'], df_atendimento['ATENDIDAS'], marker='o', color='b')
plt.xlabel('Período')
plt.ylabel('Média de Atendidas')
plt.title('Média de Atendidas por Período')
plt.xticks(rotation=45)  # Rotacionar os rótulos do eixo x para melhor visualização
plt.grid(True)  # Adiciona o grid ao gráfico

# Exibir os valores
for x, y in zip(df_atendimento['PERÍODO'], df_atendimento['ATENDIDAS']):
    plt.text(x, y, f'{y}', ha='right', va='bottom')

plt.show()